<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Validators on Nym Docs</title>
    <link>https://nymtech.net/docs/validators/</link>
    <description>Recent content in Validators on Nym Docs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    
	<atom:link href="https://nymtech.net/docs/validators/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Coconut credentials</title>
      <link>https://nymtech.net/docs/validators/coconut/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://nymtech.net/docs/validators/coconut/</guid>
      <description>Coconut credentials Like centralised credentials, Nym&amp;rsquo;s Coconut credentials can be signed with a secret key and later verified by anybody with the corresponding public key. But Nym credentials are much more powerful than &amp;ldquo;normal&amp;rdquo; signature schemes like standard RSA or DSA.
Specifically, Coconut is a blinded, re-randomizable, selective disclosure threshold credential signature scheme. That&amp;rsquo;s quite a mouthful, so let&amp;rsquo;s break it all down into digestible chunks.
Let&amp;rsquo;s say you have a message in hand.</description>
    </item>
    
    <item>
      <title>Validator flow</title>
      <link>https://nymtech.net/docs/validators/validator-flow/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://nymtech.net/docs/validators/validator-flow/</guid>
      <description>How do Nym Validators work? If you are a coder and interested in trying it, you can download, build, and run Nym Validator code today. We are also running a small and somewhat creaky testnet publicly. Nym Validators form a network of decentralized nodes:
Here&amp;rsquo;s the general flow.
A client (in purple at the bottom) has a message m in hand. The message contains a cryptographic claim. The client blinds the message (to protect the privacy of message content), so now it&amp;rsquo;s got Blinded(m).</description>
    </item>
    
    <item>
      <title>Client Demo</title>
      <link>https://nymtech.net/docs/validators/client-demo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://nymtech.net/docs/validators/client-demo/</guid>
      <description>Nym Validator Testnet In the current Nym Validators testnet, we focus primarily on making blockchain transactions private. To demonstrate the technology, we&amp;rsquo;ve set up a Nym ERC20 coin running on the Ethereum Ropsten testnet.
The Nym client sends a Nym ERC20 coin to a specific Ethereum address. This locks up the ERC20 coin until it&amp;rsquo;s released by action of the Nym Validators.
The client then goes through the credential assembly dance.</description>
    </item>
    
    <item>
      <title>Installing a Nym Validator Testnet</title>
      <link>https://nymtech.net/docs/validators/installing-testnet/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://nymtech.net/docs/validators/installing-testnet/</guid>
      <description>Validator internal communication Tendermint is used within Nym validators to prevent double-spending of generated credentials, and zero-knowledge proof to validate cryptocurrency use cases is built into the system at present. More complex smart contract cases will require the coding of specific zero-knowledge proofs to match the application domain of the contract.
You don&amp;rsquo;t need to explicitly install Tendermint, it&amp;rsquo;s taken care of by Docker
Building and running a Nym Validator node Install and run in Docker  Install Docker.</description>
    </item>
    
  </channel>
</rss>