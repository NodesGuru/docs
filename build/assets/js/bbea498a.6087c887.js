"use strict";(self.webpackChunknym_docs=self.webpackChunknym_docs||[]).push([[3625],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return u}});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,p=r(e,["components","mdxType","originalType","parentName"]),m=c(n),u=i,h=m["".concat(l,".").concat(u)]||m[u]||d[u]||o;return n?a.createElement(h,s(s({ref:t},p),{},{components:n})):a.createElement(h,s({ref:t},p))}));function u(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,s=new Array(o);s[0]=m;var r={};for(var l in t)hasOwnProperty.call(t,l)&&(r[l]=t[l]);r.originalType=e,r.mdxType="string"==typeof e?e:i,s[1]=r;for(var c=2;c<o;c++)s[c]=n[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2644:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return r},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return p},default:function(){return m}});var a=n(7462),i=n(3366),o=(n(7294),n(3905)),s=["components"],r={sidebar_label:"Websocket client",hide_title:!1,description:"How to run the Nym websocket client on a desktop or server machine.",title:"Websocket client"},l=void 0,c={unversionedId:"build-apps/websocket-client",id:"version-0.11.0/build-apps/websocket-client",isDocsHomePage:!1,title:"Websocket client",description:"How to run the Nym websocket client on a desktop or server machine.",source:"@site/versioned_docs/version-0.11.0/build-apps/websocket-client.md",sourceDirName:"build-apps",slug:"/build-apps/websocket-client",permalink:"/docs/0.11.0/build-apps/websocket-client",version:"0.11.0",lastUpdatedAt:1629392815,formattedLastUpdatedAt:"8/19/2021",frontMatter:{sidebar_label:"Websocket client",hide_title:!1,description:"How to run the Nym websocket client on a desktop or server machine.",title:"Websocket client"},sidebar:"version-0.11.0/sidebar",previous:{title:"Choose a client",permalink:"/docs/0.11.0/build-apps/choose-a-client"},next:{title:"Webassembly client",permalink:"/docs/0.11.0/build-apps/wasm-client"}},p=[{value:"Initializing a new client instance",id:"initializing-a-new-client-instance",children:[]},{value:"Running the native client",id:"running-the-native-client",children:[]},{value:"A simple example peap",id:"a-simple-example-peap",children:[]},{value:"Message Types",id:"message-types",children:[]}],d={toc:p};function m(e){var t=e.components,n=(0,i.Z)(e,s);return(0,o.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"The Nym Websocket Client was built in the ",(0,o.kt)("a",{parentName:"p",href:"/docs/0.11.0/run-nym-nodes/build-nym/"},"building nym")," section. If you haven't yet built Nym and want to run the code on this page, go there first."))),(0,o.kt)("p",null,"From inside the ",(0,o.kt)("inlineCode",{parentName:"p"},"nym")," directory, the ",(0,o.kt)("inlineCode",{parentName:"p"},"nym-client")," binary got built to the ",(0,o.kt)("inlineCode",{parentName:"p"},"./target/release/")," directory. You can run it like this (or add it to your ",(0,o.kt)("inlineCode",{parentName:"p"},"$PATH"),"):"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"./nym-client")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"nym@localhost:~$ ./nym-client\n\n\n      _ __  _   _ _ __ ___\n     | '_ \\| | | | '_ \\ _ \\\n     | | | | |_| | | | | | |\n     |_| |_|\\__, |_| |_| |_|\n            |___/\n\n             (client - version 0.11.0 )\n\n\n\nusage: --help to see available options.\n\n\n")),(0,o.kt)("p",null,"There are two commands you can issue to the client."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"init")," - initialize a new client instance. Requires ",(0,o.kt)("inlineCode",{parentName:"li"},"--id clientname")," parameter."),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"run")," - run a mixnet client process. Requires ",(0,o.kt)("inlineCode",{parentName:"li"},"--id clientname")," as a parameter")),(0,o.kt)("h3",{id:"initializing-a-new-client-instance"},"Initializing a new client instance"),(0,o.kt)("p",null,"Before you can use the client, you need to initialize a new instance of it. Each instance of the client has its own public/private keypair, and connects to its own gateway node. Taken together, these 3 things (public/private keypair + gateway node) make up an app's identity."),(0,o.kt)("p",null,"Initializing a new client instance can be done with the following command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"./nym-client init --id alice\n")),(0,o.kt)("p",null,"When you initialize a client instance, a configuration directory will be generated and stored in ",(0,o.kt)("inlineCode",{parentName:"p"},"$HOME_DIR/.nym/clients/<client-name>/"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"nym@localhost:~$ tree ~/.nym/clients/alice/\n/home/dave/.nym/clients/alice/\n\u251c\u2500\u2500 config\n\u2502\xa0\xa0 \u2514\u2500\u2500 config.toml\n\u2514\u2500\u2500 data\n    \u251c\u2500\u2500 private_identity.pem\n    \u2514\u2500\u2500 public_identity.pem\n")),(0,o.kt)("p",null,"The file ",(0,o.kt)("inlineCode",{parentName:"p"},"config.toml")," contains client configuration options, while the two ",(0,o.kt)("inlineCode",{parentName:"p"},"pem")," files contain client key information."),(0,o.kt)("p",null,"The generated files contain the client name, public/private keypairs, and gateway address. The name ",(0,o.kt)("inlineCode",{parentName:"p"},"alice")," in the example above is just a local identifier so that you can name your clients; it is never transmitted over the network."),(0,o.kt)("h3",{id:"running-the-native-client"},"Running the native client"),(0,o.kt)("p",null,"You can run the ",(0,o.kt)("inlineCode",{parentName:"p"},"alice")," client by doing this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"./nym-client run --id alice\n")),(0,o.kt)("p",null,"When you run the client, it immediately starts generating (fake) cover traffic and sending it to the Nym testnet."),(0,o.kt)("p",null,"Congratulations, you have just contributed a tiny bit of privacy to the world! ",(0,o.kt)("inlineCode",{parentName:"p"},"<CTRL-C>")," to stop the client."),(0,o.kt)("p",null,"When the client is first started, it will reach out to the Nym network's validators, and get a list of available Nym nodes (gateways, mixnodes, and validators). We call this list of nodes the network ",(0,o.kt)("em",{parentName:"p"},"topology"),". The client does this so that it knows how to connect, register itself with the network, and know which mixnodes it can route Sphinx packets through."),(0,o.kt)("p",null,"Once the client has obtained the network topology, it automatically sends a registration request to one of the first available gateway. The gateway returns a unique authentication token that the client attaches to every subsequent request to the gateway."),(0,o.kt)("h4",{id:"connecting-to-the-local-websocket"},"Connecting to the local websocket"),(0,o.kt)("p",null,"The Nym native client exposes a websocket interface that your code connects to. To program your app, choose a websocket library for whatever language you're using. The default websocket port is ",(0,o.kt)("inlineCode",{parentName:"p"},"1977"),", you can override that in the client config if you want."),(0,o.kt)("h3",{id:"a-simple-example-peap"},"A simple example peap"),(0,o.kt)("p",null,"Let's write some code. Sometimes when you're learning something new it's easiest to see a short working example. Here's a simple app written in Python. This example is packaged with the Nym platform, dig around in the ",(0,o.kt)("inlineCode",{parentName:"p"},"python-examples")," directory inside ",(0,o.kt)("inlineCode",{parentName:"p"},"clients/native")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'import asyncio\nimport json\nimport websockets\n\nself_address_request = json.dumps({"type": "selfAddress"})\n\n\nasync def send_text():\n    message = "Hello Nym!"\n\n    uri = "ws://localhost:1977"\n    async with websockets.connect(uri) as websocket:  # 1\n        await websocket.send(self_address_request)\n        self_address = json.loads(await websocket.recv())\n        print("our address is: {}".format(self_address["address"]))\n\n        text_send = json.dumps(\n            {  # 2\n                "type": "send",\n                "message": message,\n                "recipient": self_address["address"],\n            }\n        )\n\n        print("sending \'{}\' over the mix network...".format(message))\n        await websocket.send(text_send)  # 3\n        msg_send_confirmation = json.loads(await websocket.recv())  # 4\n        assert msg_send_confirmation["type"], "send"\n\n        print("waiting to receive a message from the mix network...")\n        received_message = await websocket.recv()  # 5\n        print("received {} from the mix network!".format(received_message))\n\n\nasyncio.get_event_loop().run_until_complete(send_text())\n')),(0,o.kt)("p",null,"The Python code does the following."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"connects to the websocket on port 1977"),(0,o.kt)("li",{parentName:"ol"},"formats a message to send. Nym messages have defined JSON formats."),(0,o.kt)("li",{parentName:"ol"},"sends the message into the websocket. The native client packages the message into a Sphinx packet and sends it to the mixnet"),(0,o.kt)("li",{parentName:"ol"},"waits for confirmation that the message hit the native client"),(0,o.kt)("li",{parentName:"ol"},"waits to receive messages from other Nym apps")),(0,o.kt)("p",null,"By varying the message content, you can easily build sophisticated Service Provider apps. For example, instead of ",(0,o.kt)("inlineCode",{parentName:"p"},'print("received {} from the mix network!".format(received_message))')," your Service Provider might take some action on behalf of the user - perhaps initiating a network request, a blockchain transaction, or writing to a local data store."),(0,o.kt)("h3",{id:"message-types"},"Message Types"),(0,o.kt)("p",null,"There are a small number of messages that your application sends up the websocket to interact with the native client, as follows."),(0,o.kt)("h4",{id:"sending-text"},"Sending text"),(0,o.kt)("p",null,"If you want to send text information through the mixnet, format a message like this one and poke it into the websocket:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "type": "send",\n  "message": "the message",\n  "recipient_address": "71od3ZAupdCdxeFNg8sdonqfZTnZZy1E86WYKEjxD4kj@FWYoUrnKuXryysptnCZgUYRTauHq4FnEFu2QGn5LZWbm"\n}\n')),(0,o.kt)("p",null,"In some applications, e.g. where people are chatting with friends who they know, you might want to include unencrypted reply information in the message field, like so:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "type": "send",\n  "message": {\n    "sender": "198427b63ZAupdCdxeFNg8sdonqfZTnZZy1E86WYKEjxD4kj@FWYoUrnKuXryysptnCZgUYRTauHq4FnEFu2QGn5LZWbm",\n    "chatMessage": "hi julia!"\n  },\n  "recipient_address": "71od3ZAupdCdxeFNg8sdonqfZTnZZy1E86WYKEjxD4kj@FWYoUrnKuXryysptnCZgUYRTauHq4FnEFu2QGn5LZWbm"\n}\n')),(0,o.kt)("p",null,"This provides an easy way for the receiving chat to then turn around and send a reply message:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "type": "send",\n  "message": {\n    "sender": "71od3ZAupdCdxeFNg8sdonqfZTnZZy1E86WYKEjxD4kj@FWYoUrnKuXryysptnCZgUYRTauHq4FnEFu2QGn5LZWbm",\n    "chatMessage": "winston, so lovely to hear from you! shall we meet at the antiques shop?"\n  },\n  "recipient_address": "198427b63ZAupdCdxeFNg8sdonqfZTnZZy1E86WYKEjxD4kj@FWYoUrnKuXryysptnCZgUYRTauHq4FnEFu2QGn5LZWbm"\n}\n')),(0,o.kt)("p",null,"If that fits your security model, good. However, it may be the case that you want to send anonymous replies using Single Use Reply Blocks, or ",(0,o.kt)("em",{parentName:"p"},"surbs"),". These will be available in the next version of Nym (0.11.0)."),(0,o.kt)("h4",{id:"sending-binary-data"},"Sending binary data"),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"The provided links reference a certain version of Nym, please look for the up-to-date versions of the referenced code\nparts if you have any problems.")),(0,o.kt)("p",null,"You can also send bytes instead of JSON. For that you have to send a binary websocket frame containing a binary encoded\nNym ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/nymtech/nym/blob/6f8ae53f0c47aa82b14e96bc313f47643c505063/clients/native/websocket-requests/src/requests.rs#L36"},(0,o.kt)("inlineCode",{parentName:"a"},"ClientRequest")),".\nFor the correct encoding please refer to the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/nymtech/nym/blob/6f8ae53f0c47aa82b14e96bc313f47643c505063/clients/native/websocket-requests/src/requests.rs#L216"},"rust reference implementation"),"\nas it is likely to change in the future."),(0,o.kt)("p",null,"As a response the ",(0,o.kt)("inlineCode",{parentName:"p"},"native-client")," will send a ",(0,o.kt)("inlineCode",{parentName:"p"},"ServerResponse"),", which can be decoded in a similar manner, please refer\nto the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/nymtech/nym/blob/6f8ae53f0c47aa82b14e96bc313f47643c505063/clients/native/websocket-requests/src/responses.rs#L286"},"rust implementation"),"\nfor further details."),(0,o.kt)("p",null,"One example project from the Nym community using the binary API is ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/sgeisler/btcbc-rs/"},"BTC-BC"),": Bitcoin transaction transmission via Nym, client and service provider written in Rust."),(0,o.kt)("h4",{id:"receiving-messages"},"Receiving messages"),(0,o.kt)("p",null,"When another peap sends a message to you, all extraneous information is stripped and you just get the message. So if an app sends the following message:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "type": "send",\n  "message": "2 + 2 = 4",\n  "recipient_address": "71od3ZAupdCdxeFNg8sdonqfZTnZZy1E86WYKEjxD4kj@FWYoUrnKuXryysptnCZgUYRTauHq4FnEFu2QGn5LZWbm"\n}\n')),(0,o.kt)("p",null,"The receiving user will get only ",(0,o.kt)("inlineCode",{parentName:"p"},"2 + 2 = 4"),"."),(0,o.kt)("h4",{id:"getting-your-own-address"},"Getting your own address"),(0,o.kt)("p",null,"Sometimes, when you start your app, it can be convenient to ask the native client to tell you what your own address is (from the saved configuration files). To do this, send:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "type": "selfAddress"\n}\n')),(0,o.kt)("p",null,"You'll get back:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "type": "selfAddress",\n  "address": "the-address"\n}\n')),(0,o.kt)("h4",{id:"error-messages"},"Error messages"),(0,o.kt)("p",null,"Errors from the app's client, or from the gateway, will be sent down the websocket to your code in the following format:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "type": "error",\n  "message": "string message"\n}\n')))}m.isMDXComponent=!0}}]);